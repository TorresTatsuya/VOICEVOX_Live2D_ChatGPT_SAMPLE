<!DOCTYPE html>
<html>
<head>
    <title>音声合成システム</title>
    <link rel="stylesheet" href="./index.css">
</head>
<body>
    <div class="console">
        <input type="text" id="textInput" placeholder="テキストを入力してください">
        <button onclick="synthesizeSpeech()">音声合成</button>
        <button onclick="playBgm()">BGM</button>
        <!-- <button onclick="addComment()">テスト用</button> -->
        <button id="myButton" onclick="burn()" style="display: none;">もう一度再生</button>
        <!-- <span id="thinking" style="display: none;">考え中</span> -->
    </div>

    <audio id="audioPlayer" controls style="display: none;" type=""></audio>
    <audio id="bgm" controls autoplay loop src="./ohirusugi.mp3" style="display: none;"></audio>
        <%- include("./res/live2d.ejs") %>
    <div class="dialog-box">
        <div class="character-name">ひより</div>
        <div id="thinking" class="thinking" style="display: none;">考え中・・・</div>
        <div id="msg" class="dialog-text">
        </div>
    </div>

    <div id="comment" class="balloon-chat left">
        
    </div>

    <script>
        function addComment(text){
            commentBox = document.getElementById("comment");
            if(commentBox.childElementCount > 2){
                commentBox.removeChild(commentBox.firstChild);
            }
            let newElement = document.createElement('div');
            newElement.classList.add("chatting");
            commentBox.appendChild(newElement);
            // newElement.textContent = text;
            typewrite(text, newElement)
        }        

        function playBgm() {
            const bgm = document.getElementById('bgm');
            bgm.volume = 0.1;
            if(bgm.paused){
                bgm.play();   
            }else{
                bgm.pause();
            }
        }

        function typewrite(text, id){
            let i = 0;
            id.textContent = "";
            function repeatTimer(){
                if ( i < text.length ){
                    setTimeout( () => {
                        id.textContent += text[i];
                        i++;
                        repeatTimer();
                    }, 100)
                }
            }
            repeatTimer();
        }
        async function synthesizeSpeech() {
            const text = document.getElementById('textInput').value;
            const button = document.querySelector('button');
            const audioPlayer = document.getElementById('audioPlayer');
            const thinking = document.getElementById('thinking');
            const msg = document.getElementById('msg');
            // const myButton = document.getElementById('thinking');

            // ボタンを無効化
            button.disabled = true;
            thinking.style.display = 'inline';
           
            addComment(text);
            document.getElementById('textInput').value = "";

            if(audioPlayer.style.display === 'block'){
                audioPlayer.style.display = 'none';
            }

            try {
                const response = await fetch('/synthesize', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: text })
                });

                const data = await response.json();

                if (data.success) {
                    // 音声プレーヤーの設定と再生
                    audioPlayer.src = data.audioUrl;
                    // audioPlayer.style.display = 'block';
                    myButton.style.display = 'inline';
                    // await audioPlayer.play();
                    typewrite(data.msg, msg);
                    setTimeout(document.getElementById("myButton").click(), 1000);
                    // document.getElementById("myButton").click();
                } else {
                    alert('音声合成に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('エラーが発生しました');
            } finally {
                // ボタンを再度有効化
                button.disabled = false;
                thinking.style.display = 'none';
            }
        }

    </script>



</body>
</html>